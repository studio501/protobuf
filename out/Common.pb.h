// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_Common_2eproto__INCLUDED
#define PROTOBUF_Common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHeaderImpl();
void InitDefaultsHeader();
void InitDefaultsResponseStateImpl();
void InitDefaultsResponseState();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsHeader();
  InitDefaultsResponseState();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_Common_2eproto
namespace cokprobuf {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResponseState;
class ResponseStateDefaultTypeInternal;
extern ResponseStateDefaultTypeInternal _ResponseState_default_instance_;
}  // namespace cokprobuf
namespace cokprobuf {

// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cokprobuf.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 commandId = 1;
  void clear_commandid();
  static const int kCommandIdFieldNumber = 1;
  ::google::protobuf::int32 commandid() const;
  void set_commandid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cokprobuf.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 commandid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
  friend void ::protobuf_Common_2eproto::InitDefaultsHeaderImpl();
};
// -------------------------------------------------------------------

class ResponseState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cokprobuf.ResponseState) */ {
 public:
  ResponseState();
  virtual ~ResponseState();

  ResponseState(const ResponseState& from);

  inline ResponseState& operator=(const ResponseState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseState(ResponseState&& from) noexcept
    : ResponseState() {
    *this = ::std::move(from);
  }

  inline ResponseState& operator=(ResponseState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseState* internal_default_instance() {
    return reinterpret_cast<const ResponseState*>(
               &_ResponseState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ResponseState* other);
  friend void swap(ResponseState& a, ResponseState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseState* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseState& from);
  void MergeFrom(const ResponseState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::std::string& params(int index) const;
  ::std::string* mutable_params(int index);
  void set_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_params(int index, ::std::string&& value);
  #endif
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  ::std::string* add_params();
  void add_params(const ::std::string& value);
  #if LANG_CXX11
  void add_params(::std::string&& value);
  #endif
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // int32 state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cokprobuf.ResponseState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> params_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
  friend void ::protobuf_Common_2eproto::InitDefaultsResponseStateImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cokprobuf.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .cokprobuf.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::cokprobuf::Header& header() const;
  ::cokprobuf::Header* release_header();
  ::cokprobuf::Header* mutable_header();
  void set_allocated_header(::cokprobuf::Header* header);

  // @@protoc_insertion_point(class_scope:cokprobuf.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::cokprobuf::Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
  friend void ::protobuf_Common_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cokprobuf.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .cokprobuf.ResponseState state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::cokprobuf::ResponseState& state() const;
  ::cokprobuf::ResponseState* release_state();
  ::cokprobuf::ResponseState* mutable_state();
  void set_allocated_state(::cokprobuf::ResponseState* state);

  // .cokprobuf.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::cokprobuf::Header& header() const;
  ::cokprobuf::Header* release_header();
  ::cokprobuf::Header* mutable_header();
  void set_allocated_header(::cokprobuf::Header* header);

  // @@protoc_insertion_point(class_scope:cokprobuf.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::cokprobuf::ResponseState* state_;
  ::cokprobuf::Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
  friend void ::protobuf_Common_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// int32 commandId = 1;
inline void Header::clear_commandid() {
  commandid_ = 0;
}
inline ::google::protobuf::int32 Header::commandid() const {
  // @@protoc_insertion_point(field_get:cokprobuf.Header.commandId)
  return commandid_;
}
inline void Header::set_commandid(::google::protobuf::int32 value) {
  
  commandid_ = value;
  // @@protoc_insertion_point(field_set:cokprobuf.Header.commandId)
}

// -------------------------------------------------------------------

// ResponseState

// int32 state = 1;
inline void ResponseState::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 ResponseState::state() const {
  // @@protoc_insertion_point(field_get:cokprobuf.ResponseState.state)
  return state_;
}
inline void ResponseState::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:cokprobuf.ResponseState.state)
}

// repeated string params = 2;
inline int ResponseState::params_size() const {
  return params_.size();
}
inline void ResponseState::clear_params() {
  params_.Clear();
}
inline const ::std::string& ResponseState::params(int index) const {
  // @@protoc_insertion_point(field_get:cokprobuf.ResponseState.params)
  return params_.Get(index);
}
inline ::std::string* ResponseState::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:cokprobuf.ResponseState.params)
  return params_.Mutable(index);
}
inline void ResponseState::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cokprobuf.ResponseState.params)
  params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResponseState::set_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cokprobuf.ResponseState.params)
  params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResponseState::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cokprobuf.ResponseState.params)
}
inline void ResponseState::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cokprobuf.ResponseState.params)
}
inline ::std::string* ResponseState::add_params() {
  // @@protoc_insertion_point(field_add_mutable:cokprobuf.ResponseState.params)
  return params_.Add();
}
inline void ResponseState::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cokprobuf.ResponseState.params)
}
#if LANG_CXX11
inline void ResponseState::add_params(::std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cokprobuf.ResponseState.params)
}
#endif
inline void ResponseState::add_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cokprobuf.ResponseState.params)
}
inline void ResponseState::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cokprobuf.ResponseState.params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResponseState::params() const {
  // @@protoc_insertion_point(field_list:cokprobuf.ResponseState.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResponseState::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:cokprobuf.ResponseState.params)
  return &params_;
}

// -------------------------------------------------------------------

// Request

// .cokprobuf.Header header = 1;
inline bool Request::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Request::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cokprobuf::Header& Request::header() const {
  const ::cokprobuf::Header* p = header_;
  // @@protoc_insertion_point(field_get:cokprobuf.Request.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cokprobuf::Header*>(
      &::cokprobuf::_Header_default_instance_);
}
inline ::cokprobuf::Header* Request::release_header() {
  // @@protoc_insertion_point(field_release:cokprobuf.Request.header)
  
  ::cokprobuf::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cokprobuf::Header* Request::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cokprobuf::Header;
  }
  // @@protoc_insertion_point(field_mutable:cokprobuf.Request.header)
  return header_;
}
inline void Request::set_allocated_header(::cokprobuf::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cokprobuf.Request.header)
}

// bytes content = 2;
inline void Request::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::content() const {
  // @@protoc_insertion_point(field_get:cokprobuf.Request.content)
  return content_.GetNoArena();
}
inline void Request::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cokprobuf.Request.content)
}
#if LANG_CXX11
inline void Request::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cokprobuf.Request.content)
}
#endif
inline void Request::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cokprobuf.Request.content)
}
inline void Request::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cokprobuf.Request.content)
}
inline ::std::string* Request::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:cokprobuf.Request.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_content() {
  // @@protoc_insertion_point(field_release:cokprobuf.Request.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:cokprobuf.Request.content)
}

// -------------------------------------------------------------------

// Response

// .cokprobuf.ResponseState state = 1;
inline bool Response::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Response::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::cokprobuf::ResponseState& Response::state() const {
  const ::cokprobuf::ResponseState* p = state_;
  // @@protoc_insertion_point(field_get:cokprobuf.Response.state)
  return p != NULL ? *p : *reinterpret_cast<const ::cokprobuf::ResponseState*>(
      &::cokprobuf::_ResponseState_default_instance_);
}
inline ::cokprobuf::ResponseState* Response::release_state() {
  // @@protoc_insertion_point(field_release:cokprobuf.Response.state)
  
  ::cokprobuf::ResponseState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::cokprobuf::ResponseState* Response::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::cokprobuf::ResponseState;
  }
  // @@protoc_insertion_point(field_mutable:cokprobuf.Response.state)
  return state_;
}
inline void Response::set_allocated_state(::cokprobuf::ResponseState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:cokprobuf.Response.state)
}

// .cokprobuf.Header header = 2;
inline bool Response::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Response::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cokprobuf::Header& Response::header() const {
  const ::cokprobuf::Header* p = header_;
  // @@protoc_insertion_point(field_get:cokprobuf.Response.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cokprobuf::Header*>(
      &::cokprobuf::_Header_default_instance_);
}
inline ::cokprobuf::Header* Response::release_header() {
  // @@protoc_insertion_point(field_release:cokprobuf.Response.header)
  
  ::cokprobuf::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cokprobuf::Header* Response::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cokprobuf::Header;
  }
  // @@protoc_insertion_point(field_mutable:cokprobuf.Response.header)
  return header_;
}
inline void Response::set_allocated_header(::cokprobuf::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cokprobuf.Response.header)
}

// bytes content = 3;
inline void Response::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::content() const {
  // @@protoc_insertion_point(field_get:cokprobuf.Response.content)
  return content_.GetNoArena();
}
inline void Response::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cokprobuf.Response.content)
}
#if LANG_CXX11
inline void Response::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cokprobuf.Response.content)
}
#endif
inline void Response::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cokprobuf.Response.content)
}
inline void Response::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cokprobuf.Response.content)
}
inline ::std::string* Response::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:cokprobuf.Response.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_content() {
  // @@protoc_insertion_point(field_release:cokprobuf.Response.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:cokprobuf.Response.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cokprobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Common_2eproto__INCLUDED
